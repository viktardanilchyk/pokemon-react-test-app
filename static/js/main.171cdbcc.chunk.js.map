{"version":3,"sources":["images/logo.png","pages/shared/Header.jsx","pages/pokemons/actions/index.js","helpers/guid-generator.js","pages/pokemons/components/pokemon-table/PokemonTable.jsx","App.js","pages/pokemons/reducers/pokemonTableReducer.js","pages/pokemons/reducers/index.js","reducers/index.js","api/index.js","constants/index.js","pages/pokemons/sagas/index.js","sagas/index.js","serviceWorker.js","index.js","app/store.js"],"names":["useStyles","makeStyles","createStyles","root","flexGrow","logo","maxWidth","Header","props","classes","className","AppBar","position","Toolbar","IconButton","edge","color","src","alt","getPokemonListRequest","createAction","getPokemonListSuccess","getPokemonListFailed","uuidv4","replace","c","r","Math","random","toString","columns","id","label","minWidth","rows","width","PokemonTable","React","useState","page","setPage","rowsPerPage","setRowsPerPage","dispatch","useDispatch","useSelector","state","pokemons","pokemonListReducer","pokemonTableReducer","loading","useEffect","actionCreators","console","log","length","map","item","name","frontImage","sprites","front_default","height","weight","Paper","TableContainer","container","Table","stickyHeader","TableHead","TableRow","column","TableCell","align","style","TableBody","slice","row","hover","role","tabIndex","value","TablePagination","rowsPerPageOptions","component","count","onPageChange","event","newPage","onRowsPerPageChange","target","App","Fragment","Container","defaultState","error","handleActions","action","results","payload","reducer","combineReducers","rootReducer","axios","create","baseURL","responseType","watcherSaga","fetchItems","workerSaga","takeLatest","list","API","get","response","data","url","itemResponse","pokemon","push","f","call","put","rootSaga","all","pokemonsTableSaga","Boolean","window","location","hostname","match","store","initialState","sagaMiddleware","createSagaMiddleware","middlewares","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","run","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.171cdbcc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b15175de.png\";","import React from 'react'\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport logo from \"images/logo.png\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    logo: {\r\n      maxWidth: 160\r\n    }\r\n  })\r\n);\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <img src={logo} alt=\"Pokemon React App\" className={classes.logo} />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import { createAction } from 'redux-actions';\n\nexport const getPokemonListRequest = createAction('GET_POKEMON_LIST_REQUEST');\nexport const getPokemonListSuccess = createAction('GET_POKEMON_LIST_SUCCESS');\nexport const getPokemonListFailed = createAction('GET_POKEMON_LIST_FAILED');\n","export const uuidv4 = () => {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport * as actionCreators from 'pages/pokemons/actions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { uuidv4 } from 'helpers/guid-generator';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst columns = [\r\n  { id: 'id', label: 'Pokemon Id', minWidth: 100 },\r\n  { id: 'name', label: 'Pokemon Name', minWidth: 170 },\r\n  { id: 'frontImage', label: 'Front Image', minWidth: 170 },\r\n  { id: 'height', label: 'Height', minWidth: 170 },\r\n  { id: 'weight', label: 'Weight', minWidth: 170 }\r\n];\r\n\r\nlet rows = []\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\nconst PokemonTable = (props) => {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const { pokemons, loading } = useSelector(\r\n    state => ({\r\n      pokemons: state.pokemonListReducer.pokemonTableReducer.pokemons,\r\n      loading: state.pokemonListReducer.pokemonTableReducer.loading\r\n    })\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actionCreators.getPokemonListRequest())\r\n  }, [dispatch])\r\n\r\n  console.log(pokemons);\r\n\r\n  rows = pokemons && pokemons.length !== 0 ? pokemons.map((item) => {\r\n    return {\r\n      id: item.id,\r\n      name: item.name,\r\n      frontImage: item.sprites.front_default,\r\n      height: item.height,\r\n      weight: item.weight\r\n    }\r\n  }) : []\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={uuidv4()}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={uuidv4()}>\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={uuidv4()} align={column.align}>\r\n                        {column.id === \"frontImage\" ? <img src={value} /> : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default PokemonTable;","import React from 'react';\nimport Header from 'pages/shared/Header';\nimport Container from '@material-ui/core/Container';\nimport PokemonTable from 'pages/pokemons/components/pokemon-table/PokemonTable';\n\nfunction App() {  \n  return (\n    <React.Fragment>\n      <Header />\n      <Container maxWidth=\"lg\">\n        <PokemonTable />\n      </Container>      \n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { handleActions } from 'redux-actions';\r\nimport * as actionCreators from 'pages/pokemons/actions';\r\n\r\nconst defaultState = {\r\n  pokemons: [],\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\nconst pokemonTableReducer = handleActions(\r\n  {\r\n    [actionCreators.getPokemonListRequest](state, action) {\r\n      return defaultState\r\n    },\r\n    [actionCreators.getPokemonListSuccess](state, action) {\r\n      const results = action.payload;\r\n      return { ...state, pokemons: results, loading: false };\r\n    }\r\n  },\r\n  defaultState\r\n);\r\n\r\nexport default pokemonTableReducer;","import { combineReducers } from 'redux';\r\n\r\nimport pokemonTableReducer from './pokemonTableReducer';\r\n\r\nconst reducer = combineReducers({\r\n    pokemonTableReducer\r\n});\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\nimport pokemonListReducer from '../pages/pokemons/reducers'\n\nconst rootReducer = combineReducers({\n  pokemonListReducer\n});\n\nexport default rootReducer;","import axios from \"axios\";\r\nimport { baseUrl } from \"../constants\";\r\n\r\nexport default axios.create({\r\n    baseURL: baseUrl,\r\n    responseType: \"json\"\r\n});","export const baseUrl = \"https://pokeapi.co/api/v2\"","import { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport API from \"api\";\r\nimport * as actionCreators from \"pages/pokemons/actions\"\r\n\r\n// watcher saga: watches for actions dispatched to the store, starts worker saga\r\nexport default function* watcherSaga() {\r\n  yield takeLatest(actionCreators.getPokemonListRequest, workerSaga);\r\n}\r\n\r\n// function that makes the api request and returns a Promise for response\r\nfunction* fetchItems() {\r\n  let list = [];\r\n\r\n  const response = yield API.get(\"/pokemon\");\r\n  const data = response.data.results;\r\n\r\n  for (let item of data) {\r\n    const itemResponse = yield API.get(item.url);\r\n    const pokemon = itemResponse.data;\r\n    list.push(pokemon);\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\n// worker saga: makes the api call when watcher saga sees the action\r\nfunction* workerSaga() {\r\n  try {\r\n    const response = yield call(fetchItems);\r\n    const data = response;\r\n    // dispatch a success action to the store with the new dog\r\n    yield put(actionCreators.getPokemonListSuccess(data));\r\n  } catch (error) {\r\n    // dispatch a failure action to the store with the error\r\n    yield put(actionCreators.getPokemonListFailed(error));\r\n  }\r\n}","import { all, call, delay, put, takeEvery } from 'redux-saga/effects'\nimport pokemonsTableSaga from 'pages/pokemons/sagas'\n\nfunction* rootSaga() {\n  yield all([pokemonsTableSaga()]);\n}\n\nexport default rootSaga;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport configureStore from './app/store'\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from 'reducers';\r\nimport rootSaga from 'sagas';\r\n\r\nexport default function configureStore(initialState) {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const enhancers = [middlewareEnhancer];\r\n  const composedEnhancers = composeWithDevTools(...enhancers);\r\n\r\n  const store = createStore(rootReducer, initialState, composedEnhancers);\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n}"],"sourceRoot":""}